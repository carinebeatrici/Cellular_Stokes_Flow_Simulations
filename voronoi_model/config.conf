# All runtime messages will be sent to file messages.msg
messages messages.msg

# Set up simulation box
box fixed { lx = 400.0;  ly = 100.0;  lz = 10.0 }

# Read initial positions, velocities, etc. from input file
input tissue.dat
read_cell_boundary boundary.dat

# The triangulation flag indicates that our particles are vertices of a mesh and we are running a cell simulation.
# The static_boundary flag prohibits the addition of new boundary particles which is required when, for example,
# the cells grow and divide. In this case we don't need this flag since the boundary forms a dense fixed ring and
# so the criteria for adding additional boundary particles will never be satisfied.
nlist { rcut = 2.4; pad = 0.5; build_faces; triangulation;}


# Define particle groups, according to types specified in input file
group flow  { type = 1 }
group stem  { type = 2 }
group channel { type = 3 }
group clinging {type = 4}

# .vtp file for the cell centres, boundary particles and delaunay triangulation.
dump cell { type=vtp; start=0; freq=7500; include_mesh; multi }
# .vtp file for the polygonal cell shapes
dump cell_dual { type=vtp; start=0; freq=7500; multi; dual }
# Data dump. To check occasionally what's going on manually
dump cell { type=full; start=0; freq=7500; multi; id; tp; boundary; coordinate; velocity; force; director; area; cell_area; cell_perim; keys }
# Faces files can be used to reconstruct the triangulation and the polygonal mesh in python for analysis.
#dump faces { type=face; start=0; freq=10000; multi; }

# Constrain all particles to move only on the xy plane 
constraint plane {  }


# Cell potential (the AVM)
# K is the area term stiffness, gamma is the perimeter stiffness 
# lambda is the junction tension
# This corresponds to p0 = 3.65
pair_potential vp {K = 1.0; gamma = 1.0; lambda = -4.5;}

# Add repulsion at the core to it, to stabilise the simulation. This does nothing except for pathological cell configurations.
# k sets the strength of the interaction and a is the radius.
pair_potential soft {k = 10.0; a = 1.0}

# adjust soft repulsion for the external guys to become a nice tough barrier
# Adjust potential parameters by type. 
pair_param soft { type_1 = 1; type_2 = 1; a= 1.0} 
pair_param soft { type_1 = 1; type_2 = 2; a= 1.0} 
pair_param soft { type_1 = 1; type_2 = 3; a= 1.0} # outside is barrier
pair_param soft { type_1 = 1; type_2 = 4; a= 1.0} # clinging boundary particles are normal otherwise
pair_param soft { type_1 = 2; type_2 = 2; a= 1.0} 
pair_param soft { type_1 = 2; type_2 = 3; a= 1.0} # outside is barrier
pair_param soft { type_1 = 2; type_2 = 4; a= 1.0} # clinging boundary particles are normal otherwise
pair_param soft { type_1 = 3; type_2 = 3; a= 2.0} # actually irrelevant
pair_param soft { type_1 = 3; type_2 = 4; a= 1.0; k = -10} # clinging boundary particles are *attracted* to the boundary


# Boundary bending and line tension
pair_potential boundary_bending { kappa = 1.0; }
pair_potential line_tension { lambda = 0.5; }


# Alignment will be done using polar aligner. Just turn this on generically for now, 
# and we'll set alignment parameters by type later, after the equilibration step.
pair_align polar { J = 0.0 }
# using velocity alignment for plausiblility
external_align ajpolar {tau = 500.0}


# Log info once every 1000 steps
log obstacle_particle.log { freq = 1; velocity;}


# equilibration steps: Run minimisation for two internal layers separately
# TODO Rastko: Add disable feature for brownian_pos and brownian_align

integrator brownian { group = flow; dt=0.01; seed = 654123;  mu = 1.0; nu = 0.0; v0 = 0.0}
integrator brownian { group = clinging; dt=0.01; seed = 654123;  mu = 1.0; nu = 0.0; v0 = 0.0}
run 1000
disable brownian { group=flow }
disable brownian { group=clinging }


# Now we are at the point to execute actual simulations. 
# We switch the integrator to brownian.
# Integrate equations of motion using Brownian dynamics.
# seed is the initial seed for the random number generator
# dt is the integrator time step 
# nu sets the width of the distribution for random changes of velocity: together with alignment, done through brownian_align
# mu is particle mobility, mur is rotational mobility. Both are equal for round particles
# v0 is the intensity of the self-propelling velocity: done through external self_propulsion
# we first set integrator for active particles

external self_propulsion { alpha = 0.6} 
integrator brownian_pos { group = flow; dt=0.01; seed = 654123;  mu = 1.0; }
integrator brownian_align { group = flow; dt=0.01; seed = 654123;  nu = 0.5; mur = 1.0;}
#integrator brownian_align { group = flow; dt=0.01; seed = 654123;  nu = 0.01; mur = 1.0;}
# something funny about boundary particles
# nope, that makes the fixed boundary move as well ...
integrator brownian_pos { group = clinging; dt=0.01; seed = 654123;  mu = 1.0; }
integrator brownian_align { group = clinging; dt=0.01; seed = 654123;  nu = 0.5; mur = 1.0;}
#integrator brownian_align { group = clinging; dt=0.01; seed = 654123;  nu = 0.01; mur = 1.0;}


# and add simple dynamics for boundary particles. Dead straight overdamped dynamics with nothing, not moving. This is to remind the division algorithm these are alive
integrator brownian_pos { group = stem; dt = 0.01; seed = 654123; mu = 0.0}

# Timestep is read weirdly for divisions. Need to set it again, to make sure
timestep 0.01

# Impose growth of stem cells. These are not density-dependent, just go for it
# rate is calculated as:
#
# d=division_rate*(1-z/rho_max), where z=local coordination #.
#
# So if we set division_rate=1 and rho_max=infty, we have d=1.
#
# In this density-independent limit, the division criterion is:
#
# if uniform(0,1)<freq*division_rate*dt, divide. Thus by making freq*division_rate*dt=0.0002,
# a particle should, on average, divide once every 5,000 time
# steps.
#population cell { group = stem; division_rate = 0.03; freq = 100; max_area = 2.8; growth_rate = 0.01; death_rate = 0.0; old_group=stem; new_group=flow; old_type=2; new_type=1; change_prob_1 =0.0; change_prob_2=1.0; }
population density { group=stem; division_rate=0.01; death_rate=0.0; freq=100; split_distance=0.05; old_group=stem; new_group=flow; old_type=2; new_type=1; change_prob_1 =0.0; change_prob_2=1.0; rho_max=20.0 }

# Finally, we run simulation for 20,000 time steps.
run 630000



#
#  cereb_new.conf
# 
#  Author: Silke Henkes
#  Date: March 9, 2018
# 
#  Description: Redoing Tyler's cerebellum setup using new input configuration at density 1
#  Running first with soft attractive interactions, for equilibration, with strong repulsion at pial, and activity in egl
#  Then turning on vertex potential, with division, and no-mixing tension at egl/igl interface
#  as well as additional line tension at pial outside boundary
#
#  Author:  Tyler Engstrom
#  Date:    Feb 2, 2018
#
#  Description: Attempt to simulate cerebellum growth in 2d. Group 'pial' 
#  is an elastic membrane composed of particles with strong Lennard-Jones 
#  interactions. Group 'egl' is an active, growing, annulus-shaped 
#  collection of particles having repulsive interactions with each other 
#  and with the membrane. Group 'igl' is the interior region of passive 
#  particles that have repulsive interactions with each other and with the 
#  EGL.
#  


